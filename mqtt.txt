#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "DHT.h"

#define wifi_ssid "SSID"
#define wifi_password "PASSWORD"
#define mqtt_server "broker.hivemq.com"
//#define mqtt_user "MQTT USERNAME"
//#define mqtt_pass "MQTT PASSWORD"

#define DHTPIN 4
#define DHTTYPE DHT11

#define LEDPIN 16

WiFiClient espClient;
PubSubClient client(espClient);

DHT dht(DHTPIN, DHTTYPE);

unsigned long previoustime = 0; 

void setup() {

  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);

  client.setCallback(callback);
 
  pinMode(LEDPIN, OUTPUT);
  dht.begin();

}

void setup_wifi() 
{
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(wifi_ssid);

  WiFi.begin(wifi_ssid, wifi_password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(LEDPIN, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(LEDPIN, LOW);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
      Serial.print("Attempting MQTT connection...");
    
      String clientName;  
      clientName += "esp8266-";
      uint8_t mac[6];
      WiFi.macAddress(mac);
      clientName += macToStr(mac);
      clientName += "-";
      clientName += String(micros() & 0xff, 16);
      Serial.print("Connecting to ");
      Serial.print(mqtt_server);
      Serial.print(" as ");
      Serial.println(clientName);


   // Attempt to connect
   // If you do not want to use a username and password, change next line to
   if (client.connect((char*) clientName.c_str())) {
   //if (client.connect((char*) clientName.c_str(), mqtt_user, mqtt_pass)) {
      Serial.println("connected");
      //once connected, publish an announcement
      client.publish("afk/lamp/status", "Device Connected");
      //here to put subcribe script
      client.subscribe("afk/lamp/status");

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  StaticJsonDocument<100> doc;

  long now = millis();
  if(now - previoustime > 5000) { //will execute for every 5s
    previoustime = now;
    
    float h = dht.readHumidity();
    float t = dht.readTemperature();
    
    if(isnan(h) || isnan(t)) {
      Serial.println("Failed to read from DHt sensor!");
      return;
    }
    
    Serial.print("Temperature: ");
    Serial.print(t); 
    Serial.print("Humidity: ");
    Serial.println(h);

    doc["temperature"] = t;
    doc["humidity"] = h;

//    doc["temperature"] = String(tempc).c_str();
//    doc["humidity"] = String(h).c_str();

    char buffer[100];
    
    serializeJson(doc, buffer);
    Serial.println(buffer);
//    client.publish("afk/temp", String(tempc).c_str());
    client.publish("afk/temp", buffer);

  }
  
}

String macToStr(const uint8_t* mac)
{
  String result;
  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);
    if (i < 5)
      result += ':';
  }
  return result;
}
